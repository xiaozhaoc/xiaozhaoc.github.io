<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java函数式编程学习记录</title>
      <link href="/posts/1f32.html"/>
      <url>/posts/1f32.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java函数式编程"><a href="#Java函数式编程" class="headerlink" title="Java函数式编程"></a>Java函数式编程</h1><h3 id="函数式编程-vs-面向对象编程"><a href="#函数式编程-vs-面向对象编程" class="headerlink" title="函数式编程 vs 面向对象编程"></a>函数式编程 vs 面向对象编程</h3><h4 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h4><ul><li>面向对象需要关注用什么对象完成什么事情，</li><li>函数式编程主要关注的是对数据进行了什么操作</li></ul><p>面向对象编程通过创建对象、定义属性和方法来解决问题，强调对象的状态和行为。而函数式编程通过定义和组合函数来解决问题，强调函数的输入和输出。</p><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda表达式的主要功能是可以对某些匿名内部类进行简化。使得代码更加整洁清晰</p><h4 id="核心原则"><a href="#核心原则" class="headerlink" title="核心原则"></a>核心原则</h4><p>可推导可省略</p><h4 id="使用必要条件"><a href="#使用必要条件" class="headerlink" title="使用必要条件"></a>使用必要条件</h4><p>匿名内部类必须为接口且只有一个抽象方法需要重写</p><h4 id="example1"><a href="#example1" class="headerlink" title="example1"></a>example1</h4><ul><li>Lambda写法</li></ul><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20230710170541192.png" alt="image-20230710170541192"><ul><li>普通写法</li></ul><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20230710170558764.png" alt="image-20230710170558764" style="zoom: 115%;"><h4 id="example2"><a href="#example2" class="headerlink" title="example2"></a>example2</h4><p>抽象接口IntBinaryOperator的内容如下:</p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101744066.png" alt="image-20230710173744204" style="zoom:95%;"><ul><li>普通写法</li></ul><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101734500.png" alt="image-20230710173437091" style="zoom:78%;"><ul><li><p>lambda写法</p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101744147.png" alt="image-20230710174008235" style="zoom:85%;"></li></ul><h4 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h4><ul><li><p>参数类型可以省略</p></li><li><p>方法体只有一句时大括号和return和分号可以省略</p></li><li><p>方法只有一个参数时小括号可以省略</p><h5 id="example"><a href="#example" class="headerlink" title="example"></a>example</h5><ul><li><p>省略前</p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101744021.png" alt="image-20230710174311878" style="zoom:95%;"></li><li><p>省略后</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101744062.png" alt="image-20230710174355840"></p></li></ul></li></ul><h3 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h3><h4 id="Stream流的作用"><a href="#Stream流的作用" class="headerlink" title="Stream流的作用"></a>Stream流的作用</h4><p>大数据量下处理集合效率更高</p><ul><li><p>并行流</p></li><li><p>消灭嵌套地狱</p></li><li><p>代码可读性高</p></li></ul><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101747367.png" alt="image-20230710174728779" style="zoom:80%;"><h4 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h4><ul><li><p>匿名内部类写法</p><p>  <img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101750514.png" alt="image-20230710174924258"></p></li><li><p>Lambda写法</p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101750661.png" alt="image-20230710174941132" style="zoom:80%;"></li></ul><h4 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h4><ul><li><h5 id="单列集合"><a href="#单列集合" class="headerlink" title="单列集合"></a>单列集合</h5><pre class=" language-java"><code class="language-java">集合对象<span class="token punctuation">.</span><span class="token function">Stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101751694.png" alt="image-20230710175053030" style="zoom:150%;"></li><li><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre class=" language-java"><code class="language-java">Arrays<span class="token punctuation">.</span>stream</code></pre><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101813682.png" alt="image-20230710175228482" style="zoom:150%;"></li><li><h5 id="双列集合"><a href="#双列集合" class="headerlink" title="双列集合"></a>双列集合</h5><p>转为单列集合再创建 </p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101813240.png" alt="image-20230710175453709" style="zoom:150%;"></li><li><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>1、惰性求值（如果没有终结操作，没有中间操作是不会得到快行的）<br>2、流是一次性的（二旦一个流对像经过一个终结操作后。这个流就不能再被使用）<br>3、不会影响原数据（我们在流中可以多数据做很多处理。但是正常情况下是不会影响原来集合</p></li></ul><h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><ul><li><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><p>可以对流中的元素进行条件过滤，符合条件的继续留在流中</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101813292.png" alt="image-20230710175722633"></p></li><li><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>可以把对流中的元素进行计算或转换。</p><h6 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h6><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101813998.png" alt="image-20230710175843777" style="zoom:150%;"><h6 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h6><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101813472.png" alt="image-20230710175859855" style="zoom:150%;"></li><li><h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><p>可以去除流中的重复元素</p><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> - 注意：distinct方法是依赖Object的equals方法来判断是否是相同对象的。所以需要注意重写equals方法。</div><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101813573.png" alt="image-20230710180050630"></p></li><li><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h5><p>可以对流中的元素进行排序</p><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> -  返回由该流的元素组成的流，按自然顺序排序。如果此流的元素不是Comparable，则在执行终端操作时可能会抛出 。java.lang.ClassCastException</div><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812235.png" alt="image-20230710180100586"></p></li><li><h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><p>限制输出</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812466.png" alt="image-20230710180112817"></p></li><li><h5 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h5><p>跳过元素</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812530.png" alt="image-20230710180125656"></p></li><li><h5 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h5><p>map只能把一个对象转换成另一个对象来作为流中的元素。而flatMap可以把一个对象转换成多个对象作为流中的元素。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812731.png" alt="image-20230710180145491"></p></li></ul><h4 id="终结操作"><a href="#终结操作" class="headerlink" title="终结操作"></a>终结操作</h4><ul><li><h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><p>可以用来获取当前流中元素的个数。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812887.png" alt="image-20230710180256266"></p></li><li><h5 id="max-min"><a href="#max-min" class="headerlink" title="max/min"></a>max/min</h5><p>求最大最小值</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812887.png"></p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812832.png" alt="image-20230710180314936"></p></li><li><h5 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h5><p>把当前流转换成一个集合。</p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812251.png" alt="image-20230710180410873" style="zoom:150%;"></li><li><h5 id="reduce归并"><a href="#reduce归并" class="headerlink" title="reduce归并"></a>reduce归并</h5><p>对流中的数据按照你指定的计算方式计算出一个结果。</p><p>官方给出的源码格式</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812897.png" alt="image-20230710180518039"></p><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812822.png" alt="image-20230710180551732"></p><h6 id="reduce的另一种重载方法"><a href="#reduce的另一种重载方法" class="headerlink" title="reduce的另一种重载方法"></a>reduce的另一种重载方法</h6><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812050.png" alt="image-20230710181046650"></p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812281.png" alt="image-20230710180700950"></p></li></ul><h4 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h4><ul><li><h5 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h5><p>可以用来判断是否有任意符合匹配条件的元素，结果为boolean类型。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812357.png" alt="image-20230710180718185"></p></li><li><p>allMatch</p><p>可以用来判断是否有全部符合匹配条件的元素</p></li><li><p>noneMatch</p><p>可以用来判断是否有全部不符合匹配条件的元素</p></li></ul><h4 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h4><p>我们在使用ambda时，如果方法体中只有一个方法的调用的话（包括构造方法），我们可以用方法引用进一步简化代码。</p><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><pre class=" language-java"><code class="language-java">类名或者对象名<span class="token operator">:</span><span class="token operator">:</span>方法名</code></pre><h5 id="引用类的静态方法"><a href="#引用类的静态方法" class="headerlink" title="引用类的静态方法"></a>引用类的静态方法</h5><ul><li><p>类名::方法名</p><p> 使用前提如果我们在重写方法的时候，方法体中只有一行代码，并目这行代码是调用了某个类的静态方法，并目我们把要重写的抽象方法中所有的参数都按照顺序传入了这个静态方法中，这个时候我们就可以引用类的静态方法。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理-计算机的运算方法"><a href="#计算机组成原理-计算机的运算方法" class="headerlink" title="计算机组成原理-计算机的运算方法"></a>计算机组成原理-计算机的运算方法</h1><h2 id="1-1-无符号数和有符号数"><a href="#1-1-无符号数和有符号数" class="headerlink" title="1.1 无符号数和有符号数"></a>1.1 无符号数和有符号数</h2><h3 id="一、无符号数"><a href="#一、无符号数" class="headerlink" title="一、无符号数"></a>一、无符号数</h3><p>​    <strong>无符号数</strong>（unsigned）是<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B">计算机编程</a>中的一种<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a>。<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E5%8F%B7%E6%95%B0">有符号数</a>（signed）可以表示特定类型规定范围内的整数（包括负数），而无符号数只能表示<a href="https://zh.wikipedia.org/wiki/%E9%9D%9E%E8%B4%9F%E6%95%B0">非负数</a>（0及<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E6%95%B0">正数</a>）。</p><p>有符号数能够表示负数的代价是能够表示的正数范围的缩小，因为其约一半的数值范围要用来表示负数（如8位有符号整数中，对应8位无符号整数表示128<del>255的部分被用于表示-127</del>-1）。无符号数可以利用其所占有的所有<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D">位</a>来表示较大的数。</p><p>​    <img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917195632562.png" alt="image-20210917195632562" style="zoom:50%;"></p><h3 id="二、有符号数"><a href="#二、有符号数" class="headerlink" title="二、有符号数"></a>二、有符号数</h3><h4 id="1-机器数与真值"><a href="#1-机器数与真值" class="headerlink" title="1.机器数与真值"></a>1.机器数与真值</h4><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917200540311.png" alt="image-20210917200540311" style="zoom:50%;"><h4 id="2-原码表示法"><a href="#2-原码表示法" class="headerlink" title="2.原码表示法"></a>2.原码表示法</h4><ul><li>整数</li></ul><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917200703265.png" alt="image-20210917200703265" style="zoom: 50%;"><p>​                                    </p><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 注：符号为1是负数，为0为证书</div><p></p><ul><li>小数</li></ul><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917201049036.png" alt="image-20210917201049036" style="zoom:50%;"><p>​        <strong>原码的特点：简单直观</strong></p><p>​            但是使用原码作加法时，会出现问题</p><p>​            <img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917201855693.png" alt="image-20210917201855693" style="zoom:67%;"></p><h4 id="3-补码"><a href="#3-补码" class="headerlink" title="3.补码"></a>3.补码</h4><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917202112720.png" alt="image-20210917202112720"></p><p>​            </p><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 一个负数加上“模” 即得该负数的补数</div><p></p><p>​            </p><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 一个正数和一个负数互为补数时它们绝对值之和即为模数</div><p></p><p>​    3.1 补码的定义</p><p>​            <img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917202649093.png" alt="image-20210917202649093"></p><h4 id="4-反码"><a href="#4-反码" class="headerlink" title="4.反码"></a>4.反码</h4><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917202924189.png" alt="image-20210917202924189"></p><h4 id="5、移码表示法"><a href="#5、移码表示法" class="headerlink" title="5、移码表示法"></a>5、移码表示法</h4><p> 移码的作用：用移码表示浮点数的阶码能方便地判断浮点数的阶码大小</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917203332216.png" alt="image-20210917203332216"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>​    正数：原码 = 反码 = 补码</p><p>​         移码 = 每位取反</p><p>​    负数：补码 = 除符号位外每一位取反 +1</p><p>​         反码 = 原码除符号位外每位取反</p><p>​         移码 = 每位取反</p><h2 id="1-2-计算机进制转换"><a href="#1-2-计算机进制转换" class="headerlink" title="1.2 计算机进制转换"></a>1.2 计算机进制转换</h2><p>&nbsp;一、十进制转 N 进制</p><ul><li><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> tips : 除N，取余，倒排</div><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917210337573.png" alt="image-20210917210337573" style="zoom: 50%;"></li></ul><p><strong>21(十) –&gt; 10101(二)</strong></p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917210601815.png" alt="image-20210917210601815" style="zoom:50%;"><p><strong>21(十) –&gt; 25(八)</strong></p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917210819121.png" alt="image-20210917210819121" style="zoom:50%;"><p><strong>21(十) –&gt; 15(十六)</strong></p><p>二、N进制转10进制</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917212547728.png" alt="image-20210917212547728"></p><p>**10101(二) –&gt; 21(十) **</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917212922198.png" alt="image-20210917212922198"></p><p>**25(八) –&gt; 21(十) **</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917213045073.png" alt="image-20210917213045073"></p><p>**15(十六) –&gt; 21(十) **</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-线性表-顺序表(c语言)</title>
      <link href="/posts/d180.html"/>
      <url>/posts/d180.html</url>
      
        <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> ​一个数据元素可以由若干个数据项组成。数据元素称为记录，含有大量记录的线性表又称为文件。这种结构具有下列特点：存在一个唯一的没有前驱的（头）数据元素；存在一个唯一的没有后继的（尾）数据元素；此外，每一个数据元素均有一个直接前驱和一个直接后继数据元素。 </div>　　<h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>​    <strong>顺序表</strong>是在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E5%AD%98">计算机内存</a>中以<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84">数组</a>的形式保存的<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8">线性表</a>，是指用一组<a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80">地址</a>连续的<a href="https://zh.wikipedia.org/w/index.php?title=%E5%AD%98%E5%82%A8%E5%8D%95%E5%85%83&amp;action=edit&amp;redlink=1">存储单元</a>依次存储数据元素的线性结构，使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系。</p><hr><h4 id="顺序表头文件-SeqList-c"><a href="#顺序表头文件-SeqList-c" class="headerlink" title="顺序表头文件(SeqList.c)"></a>顺序表头文件(SeqList.c)</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _SEQLIST_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _SEQLIST_H_</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> SeqList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//void 起别名为SeqList</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> SeqListNode<span class="token punctuation">;</span>SeqList<span class="token operator">*</span> <span class="token function">SeqList_Create</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SeqList_Destory</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SeqList_Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">SeqList_Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">SeqList_Capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h4 id="一-创建顺序表-SeqListAll-c"><a href="#一-创建顺序表-SeqListAll-c" class="headerlink" title="一. 创建顺序表(SeqListAll.c)"></a>一. 创建顺序表(SeqListAll.c)</h4><ol><li><p>定义一个struct来保存顺序表信息</p></li><li><p>为头节点分配内存</p></li><li><p>为顺序表分配空间，将顺序表空间地址保存在头节点中</p></li><li><p>将头节点地址返回给调用者</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//创建顺序表</span>SeqList<span class="token operator">*</span>  <span class="token function">SeqList_Create</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    TSeqList<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TSeqList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//为头节点分配空间</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//中间对象分配失败</span>        ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func SeqList_Create() error:%d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//memset(temp,0,sizeof(TSeqList)); //填充</span>    temp<span class="token operator">-></span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    temp<span class="token operator">-></span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    temp<span class="token operator">-></span>node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分配一个指针数组</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>node<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//中间对象投指针分配失败</span>        ret <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func SeqList_Create() error:%d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h4 id="二、求顺序表的容量"><a href="#二、求顺序表的容量" class="headerlink" title="二、求顺序表的容量"></a>二、求顺序表的容量</h4><ul><li><p>直接从头节点获取</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//获取容量</span><span class="token keyword">int</span> <span class="token function">SeqList_Capacity</span><span class="token punctuation">(</span>SeqList<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    TSeqList<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList<span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token punctuation">;</span>    <span class="token keyword">return</span> temp<span class="token operator">-></span>capacity<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="三、获取顺序表长度"><a href="#三、获取顺序表长度" class="headerlink" title="三、获取顺序表长度"></a>三、获取顺序表长度</h4><ul><li><p>直接从头节点获取</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//求顺序表的长度</span><span class="token keyword">int</span> <span class="token function">SeqList_Length</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    TSeqList <span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList <span class="token operator">*</span><span class="token punctuation">)</span>list<span class="token punctuation">;</span>    <span class="token keyword">return</span> temp<span class="token operator">-></span>length<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="四、插入元素"><a href="#四、插入元素" class="headerlink" title="四、插入元素"></a>四、插入元素</h4><ul><li><p>当顺序表已满时，表中的元素向后无法移动。需要做出特别处理【不插入or开辟一块更大的空间】</p></li><li><p>当插入的位置是空闲区域时，需要作出相应处理</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//插入元素</span><span class="token keyword">int</span> <span class="token function">SeqList_Insert</span><span class="token punctuation">(</span>SeqList<span class="token operator">*</span> list<span class="token punctuation">,</span>SeqListNode<span class="token operator">*</span> node<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    TSeqList <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">||</span> node<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList <span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//顺序表满了</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>length <span class="token operator">>=</span> temp<span class="token operator">-></span>capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">></span>temp<span class="token operator">-></span>length<span class="token punctuation">)</span>        pos <span class="token operator">=</span> temp<span class="token operator">-></span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>temp<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">></span>pos<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp<span class="token operator">-></span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token operator">-></span>node<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp<span class="token operator">-></span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>node<span class="token punctuation">;</span>    temp<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="五、删除元素"><a href="#五、删除元素" class="headerlink" title="五、删除元素"></a>五、删除元素</h4><ul><li><p>从顺序表中删除某一个元素后需要将后面的元素依次向前移动来不齐空位</p><pre class=" language-c"><code class="language-c"><span class="token operator">/</span>删除元素SeqList<span class="token operator">*</span> <span class="token function">SeqList_Delete</span><span class="token punctuation">(</span>SeqList<span class="token operator">*</span> list<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    TSeqList<span class="token operator">*</span>  tlist <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    SeqListNode<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    tlist <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList <span class="token operator">*</span><span class="token punctuation">)</span>list<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">=</span><span class="token constant">NULL</span><span class="token operator">||</span> pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token operator">||</span> pos<span class="token operator">>=</span> tlist<span class="token operator">-></span>capacity<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"SeqList_DELET ERROR\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>SeqListNode <span class="token operator">*</span> <span class="token punctuation">)</span>tlist<span class="token operator">-></span>node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//要删除的元素</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>tlist<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tlist<span class="token operator">-></span>node<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tlist<span class="token operator">-></span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    tlist<span class="token operator">-></span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="六、查找元素"><a href="#六、查找元素" class="headerlink" title="六、查找元素"></a>六、查找元素</h4><ul><li><p>使用数组下标查找,非常方便</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//查找</span>SeqList<span class="token operator">*</span> <span class="token function">SeqList_Get</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span> list<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//健壮性判断</span>    TSeqList<span class="token operator">*</span> tlist <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    SeqListNode<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    tlist <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList <span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span> pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">>=</span> tlist<span class="token operator">-></span>capacity<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"SeqList_Get error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>SeqListNode <span class="token operator">*</span><span class="token punctuation">)</span>tlist<span class="token operator">-></span>node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="七、清空表"><a href="#七、清空表" class="headerlink" title="七、清空表"></a>七、清空表</h4><ul><li><p>将表中的元素全部置为0</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//清空表</span><span class="token keyword">void</span> <span class="token function">SeqListClean</span><span class="token punctuation">(</span>SeqList<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    TSeqList <span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList <span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token punctuation">;</span>    temp<span class="token operator">-></span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//menset(temp->node,0,(temp->capacity * sizeof(void *)));</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="八、销毁表"><a href="#八、销毁表" class="headerlink" title="八、销毁表"></a>八、销毁表</h4><ul><li><p>将整个表销毁</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//销毁表</span><span class="token keyword">void</span> <span class="token function">Seqlist_Destory</span><span class="token punctuation">(</span>SeqList<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    TSeqList<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList <span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="九、测试-test-c"><a href="#九、测试-test-c" class="headerlink" title="九、测试(test.c)"></a>九、测试(test.c)</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"SeqList.c"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _Teacher <span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Teacher<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    SeqList<span class="token operator">*</span> list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Teacher t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">,</span>t4<span class="token punctuation">,</span>t5<span class="token punctuation">;</span>    t1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    t3<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>    t4<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span>    t5<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建节点</span>    list <span class="token operator">=</span> <span class="token function">SeqList_Create</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入节点</span>    ret <span class="token operator">=</span> <span class="token function">SeqList_Insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token punctuation">(</span>SeqListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>t1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">SeqList_Insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token punctuation">(</span>SeqListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>t2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">SeqList_Insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token punctuation">(</span>SeqListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>t3<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">SeqList_Insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token punctuation">(</span>SeqListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>t4<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">SeqList_Insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token punctuation">(</span>SeqListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>t5<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"顺序表容量%d\n"</span><span class="token punctuation">,</span><span class="token function">SeqList_Capacity</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"顺序表长度%d\n"</span><span class="token punctuation">,</span><span class="token function">SeqList_Length</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历顺序表</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"遍历顺序表: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">SeqList_Length</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Teacher<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">SeqList_Get</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func SeqList_Get error"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//return;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age: %d\n"</span><span class="token punctuation">,</span>temp<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//销毁链表</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"销毁顺序表: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">SeqList_Length</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Teacher <span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">SeqList_Delete</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func SeqList_Delete error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age :%d\n"</span><span class="token punctuation">,</span>temp<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Seqlist_Destory</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> datastructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> datastructure </tag>
            
            <tag> 课堂笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2</title>
      <link href="/posts/c9f9.html"/>
      <url>/posts/c9f9.html</url>
      
        <content type="html"><![CDATA[<div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 紅色</div><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 綠色</div><div class="uk-alert uk-alert-warning"><i class="fa fa-exclamation-circle"></i> 黃色</div>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>:<span class="github-emoji"><span>🛰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
