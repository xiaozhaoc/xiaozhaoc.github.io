<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理-计算机的运算方法"><a href="#计算机组成原理-计算机的运算方法" class="headerlink" title="计算机组成原理-计算机的运算方法"></a>计算机组成原理-计算机的运算方法</h1><h2 id="1-1-无符号数和有符号数"><a href="#1-1-无符号数和有符号数" class="headerlink" title="1.1 无符号数和有符号数"></a>1.1 无符号数和有符号数</h2><h3 id="一、无符号数"><a href="#一、无符号数" class="headerlink" title="一、无符号数"></a>一、无符号数</h3><p>​    <strong>无符号数</strong>（unsigned）是<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A8%8B">计算机编程</a>中的一种<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a>。<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E5%8F%B7%E6%95%B0">有符号数</a>（signed）可以表示特定类型规定范围内的整数（包括负数），而无符号数只能表示<a href="https://zh.wikipedia.org/wiki/%E9%9D%9E%E8%B4%9F%E6%95%B0">非负数</a>（0及<a href="https://zh.wikipedia.org/wiki/%E6%AD%A3%E6%95%B0">正数</a>）。</p><p>有符号数能够表示负数的代价是能够表示的正数范围的缩小，因为其约一半的数值范围要用来表示负数（如8位有符号整数中，对应8位无符号整数表示128<del>255的部分被用于表示-127</del>-1）。无符号数可以利用其所占有的所有<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D">位</a>来表示较大的数。</p><p>​    <img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917195632562.png" alt="image-20210917195632562" style="zoom:50%;"></p><h3 id="二、有符号数"><a href="#二、有符号数" class="headerlink" title="二、有符号数"></a>二、有符号数</h3><h4 id="1-机器数与真值"><a href="#1-机器数与真值" class="headerlink" title="1.机器数与真值"></a>1.机器数与真值</h4><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917200540311.png" alt="image-20210917200540311" style="zoom:50%;"><h4 id="2-原码表示法"><a href="#2-原码表示法" class="headerlink" title="2.原码表示法"></a>2.原码表示法</h4><ul><li>整数</li></ul><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917200703265.png" alt="image-20210917200703265" style="zoom: 50%;"><p>​                                    </p><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 注：符号为1是负数，为0为证书</div><p></p><ul><li>小数</li></ul><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917201049036.png" alt="image-20210917201049036" style="zoom:50%;"><p>​        <strong>原码的特点：简单直观</strong></p><p>​            但是使用原码作加法时，会出现问题</p><p>​            <img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917201855693.png" alt="image-20210917201855693" style="zoom:67%;"></p><h4 id="3-补码"><a href="#3-补码" class="headerlink" title="3.补码"></a>3.补码</h4><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917202112720.png" alt="image-20210917202112720"></p><p>​            </p><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 一个负数加上“模” 即得该负数的补数</div><p></p><p>​            </p><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 一个正数和一个负数互为补数时它们绝对值之和即为模数</div><p></p><p>​    3.1 补码的定义</p><p>​            <img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917202649093.png" alt="image-20210917202649093"></p><h4 id="4-反码"><a href="#4-反码" class="headerlink" title="4.反码"></a>4.反码</h4><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917202924189.png" alt="image-20210917202924189"></p><h4 id="5、移码表示法"><a href="#5、移码表示法" class="headerlink" title="5、移码表示法"></a>5、移码表示法</h4><p> 移码的作用：用移码表示浮点数的阶码能方便地判断浮点数的阶码大小</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917203332216.png" alt="image-20210917203332216"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>​    正数：原码 = 反码 = 补码</p><p>​         移码 = 每位取反</p><p>​    负数：补码 = 除符号位外每一位取反 +1</p><p>​         反码 = 原码除符号位外每位取反</p><p>​         移码 = 每位取反</p><h2 id="1-2-计算机进制转换"><a href="#1-2-计算机进制转换" class="headerlink" title="1.2 计算机进制转换"></a>1.2 计算机进制转换</h2><p>&nbsp;一、十进制转 N 进制</p><ul><li><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> tips : 除N，取余，倒排</div><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917210337573.png" alt="image-20210917210337573" style="zoom: 50%;"></li></ul><p><strong>21(十) –&gt; 10101(二)</strong></p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917210601815.png" alt="image-20210917210601815" style="zoom:50%;"><p><strong>21(十) –&gt; 25(八)</strong></p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917210819121.png" alt="image-20210917210819121" style="zoom:50%;"><p><strong>21(十) –&gt; 15(十六)</strong></p><p>二、N进制转10进制</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917212547728.png" alt="image-20210917212547728"></p><p>**10101(二) –&gt; 21(十) **</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917212922198.png" alt="image-20210917212922198"></p><p>**25(八) –&gt; 21(十) **</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20210917213045073.png" alt="image-20210917213045073"></p><p>**15(十六) –&gt; 21(十) **</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-线性表-顺序表(c语言)</title>
      <link href="/posts/d180.html"/>
      <url>/posts/d180.html</url>
      
        <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> ​一个数据元素可以由若干个数据项组成。数据元素称为记录，含有大量记录的线性表又称为文件。这种结构具有下列特点：存在一个唯一的没有前驱的（头）数据元素；存在一个唯一的没有后继的（尾）数据元素；此外，每一个数据元素均有一个直接前驱和一个直接后继数据元素。 </div>　　<h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>​    <strong>顺序表</strong>是在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E5%AD%98">计算机内存</a>中以<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84">数组</a>的形式保存的<a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8">线性表</a>，是指用一组<a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80">地址</a>连续的<a href="https://zh.wikipedia.org/w/index.php?title=%E5%AD%98%E5%82%A8%E5%8D%95%E5%85%83&amp;action=edit&amp;redlink=1">存储单元</a>依次存储数据元素的线性结构，使得线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理存储的相邻关系来反映数据元素之间逻辑上的相邻关系。</p><hr><h4 id="顺序表头文件-SeqList-c"><a href="#顺序表头文件-SeqList-c" class="headerlink" title="顺序表头文件(SeqList.c)"></a>顺序表头文件(SeqList.c)</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _SEQLIST_H_</span><span class="token macro property">#<span class="token directive keyword">define</span> _SEQLIST_H_</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> SeqList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//void 起别名为SeqList</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> SeqListNode<span class="token punctuation">;</span>SeqList<span class="token operator">*</span> <span class="token function">SeqList_Create</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SeqList_Destory</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">SeqList_Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">SeqList_Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">SeqList_Capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><h4 id="一-创建顺序表-SeqListAll-c"><a href="#一-创建顺序表-SeqListAll-c" class="headerlink" title="一. 创建顺序表(SeqListAll.c)"></a>一. 创建顺序表(SeqListAll.c)</h4><ol><li><p>定义一个struct来保存顺序表信息</p></li><li><p>为头节点分配内存</p></li><li><p>为顺序表分配空间，将顺序表空间地址保存在头节点中</p></li><li><p>将头节点地址返回给调用者</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//创建顺序表</span>SeqList<span class="token operator">*</span>  <span class="token function">SeqList_Create</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ret<span class="token punctuation">;</span>    TSeqList<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>TSeqList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//为头节点分配空间</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//中间对象分配失败</span>        ret <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func SeqList_Create() error:%d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//memset(temp,0,sizeof(TSeqList)); //填充</span>    temp<span class="token operator">-></span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    temp<span class="token operator">-></span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    temp<span class="token operator">-></span>node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分配一个指针数组</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>node<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//中间对象投指针分配失败</span>        ret <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func SeqList_Create() error:%d\n"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h4 id="二、求顺序表的容量"><a href="#二、求顺序表的容量" class="headerlink" title="二、求顺序表的容量"></a>二、求顺序表的容量</h4><ul><li><p>直接从头节点获取</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//获取容量</span><span class="token keyword">int</span> <span class="token function">SeqList_Capacity</span><span class="token punctuation">(</span>SeqList<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    TSeqList<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList<span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token punctuation">;</span>    <span class="token keyword">return</span> temp<span class="token operator">-></span>capacity<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="三、获取顺序表长度"><a href="#三、获取顺序表长度" class="headerlink" title="三、获取顺序表长度"></a>三、获取顺序表长度</h4><ul><li><p>直接从头节点获取</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//求顺序表的长度</span><span class="token keyword">int</span> <span class="token function">SeqList_Length</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    TSeqList <span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList <span class="token operator">*</span><span class="token punctuation">)</span>list<span class="token punctuation">;</span>    <span class="token keyword">return</span> temp<span class="token operator">-></span>length<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="四、插入元素"><a href="#四、插入元素" class="headerlink" title="四、插入元素"></a>四、插入元素</h4><ul><li><p>当顺序表已满时，表中的元素向后无法移动。需要做出特别处理【不插入or开辟一块更大的空间】</p></li><li><p>当插入的位置是空闲区域时，需要作出相应处理</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//插入元素</span><span class="token keyword">int</span> <span class="token function">SeqList_Insert</span><span class="token punctuation">(</span>SeqList<span class="token operator">*</span> list<span class="token punctuation">,</span>SeqListNode<span class="token operator">*</span> node<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    TSeqList <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">||</span> node<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList <span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//顺序表满了</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>length <span class="token operator">>=</span> temp<span class="token operator">-></span>capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">></span>temp<span class="token operator">-></span>length<span class="token punctuation">)</span>        pos <span class="token operator">=</span> temp<span class="token operator">-></span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>temp<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">></span>pos<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp<span class="token operator">-></span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token operator">-></span>node<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp<span class="token operator">-></span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>node<span class="token punctuation">;</span>    temp<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="五、删除元素"><a href="#五、删除元素" class="headerlink" title="五、删除元素"></a>五、删除元素</h4><ul><li><p>从顺序表中删除某一个元素后需要将后面的元素依次向前移动来不齐空位</p><pre class=" language-c"><code class="language-c"><span class="token operator">/</span>删除元素SeqList<span class="token operator">*</span> <span class="token function">SeqList_Delete</span><span class="token punctuation">(</span>SeqList<span class="token operator">*</span> list<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    TSeqList<span class="token operator">*</span>  tlist <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    SeqListNode<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    tlist <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList <span class="token operator">*</span><span class="token punctuation">)</span>list<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">=</span><span class="token constant">NULL</span><span class="token operator">||</span> pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token operator">||</span> pos<span class="token operator">>=</span> tlist<span class="token operator">-></span>capacity<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"SeqList_DELET ERROR\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>SeqListNode <span class="token operator">*</span> <span class="token punctuation">)</span>tlist<span class="token operator">-></span>node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//要删除的元素</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>tlist<span class="token operator">-></span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tlist<span class="token operator">-></span>node<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tlist<span class="token operator">-></span>node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    tlist<span class="token operator">-></span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="六、查找元素"><a href="#六、查找元素" class="headerlink" title="六、查找元素"></a>六、查找元素</h4><ul><li><p>使用数组下标查找,非常方便</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//查找</span>SeqList<span class="token operator">*</span> <span class="token function">SeqList_Get</span><span class="token punctuation">(</span>SeqList <span class="token operator">*</span> list<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//健壮性判断</span>    TSeqList<span class="token operator">*</span> tlist <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    SeqListNode<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    tlist <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList <span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span> pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> pos <span class="token operator">>=</span> tlist<span class="token operator">-></span>capacity<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"SeqList_Get error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>SeqListNode <span class="token operator">*</span><span class="token punctuation">)</span>tlist<span class="token operator">-></span>node<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="七、清空表"><a href="#七、清空表" class="headerlink" title="七、清空表"></a>七、清空表</h4><ul><li><p>将表中的元素全部置为0</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//清空表</span><span class="token keyword">void</span> <span class="token function">SeqListClean</span><span class="token punctuation">(</span>SeqList<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    TSeqList <span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList <span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token punctuation">;</span>    temp<span class="token operator">-></span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//menset(temp->node,0,(temp->capacity * sizeof(void *)));</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="八、销毁表"><a href="#八、销毁表" class="headerlink" title="八、销毁表"></a>八、销毁表</h4><ul><li><p>将整个表销毁</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//销毁表</span><span class="token keyword">void</span> <span class="token function">Seqlist_Destory</span><span class="token punctuation">(</span>SeqList<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    TSeqList<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token punctuation">(</span>TSeqList <span class="token operator">*</span><span class="token punctuation">)</span> list<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token operator">-></span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="九、测试-test-c"><a href="#九、测试-test-c" class="headerlink" title="九、测试(test.c)"></a>九、测试(test.c)</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"SeqList.c"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> _Teacher <span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Teacher<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    SeqList<span class="token operator">*</span> list <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Teacher t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">,</span>t4<span class="token punctuation">,</span>t5<span class="token punctuation">;</span>    t1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    t3<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span>    t4<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span>    t5<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建节点</span>    list <span class="token operator">=</span> <span class="token function">SeqList_Create</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入节点</span>    ret <span class="token operator">=</span> <span class="token function">SeqList_Insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token punctuation">(</span>SeqListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>t1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">SeqList_Insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token punctuation">(</span>SeqListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>t2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">SeqList_Insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token punctuation">(</span>SeqListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>t3<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">SeqList_Insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token punctuation">(</span>SeqListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>t4<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">SeqList_Insert</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token punctuation">(</span>SeqListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>t5<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"顺序表容量%d\n"</span><span class="token punctuation">,</span><span class="token function">SeqList_Capacity</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"顺序表长度%d\n"</span><span class="token punctuation">,</span><span class="token function">SeqList_Length</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历顺序表</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"遍历顺序表: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">SeqList_Length</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Teacher<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">SeqList_Get</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func SeqList_Get error"</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//return;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age: %d\n"</span><span class="token punctuation">,</span>temp<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//销毁链表</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"销毁顺序表: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">SeqList_Length</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Teacher <span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span>Teacher <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">SeqList_Delete</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"func SeqList_Delete error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age :%d\n"</span><span class="token punctuation">,</span>temp<span class="token operator">-></span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Seqlist_Destory</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> datastructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> datastructure </tag>
            
            <tag> 课堂笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2</title>
      <link href="/posts/c9f9.html"/>
      <url>/posts/c9f9.html</url>
      
        <content type="html"><![CDATA[<div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 紅色</div><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 綠色</div><div class="uk-alert uk-alert-warning"><i class="fa fa-exclamation-circle"></i> 黃色</div>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/posts/f82e.html"/>
      <url>/posts/f82e.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>:<span class="github-emoji"><span>🛰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
