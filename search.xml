<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringCloud  Eureka学习记录</title>
      <link href="/posts/bb66.html"/>
      <url>/posts/bb66.html</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud-Eureka学习记录"><a href="#SpringCloud-Eureka学习记录" class="headerlink" title="SpringCloud  Eureka学习记录"></a>SpringCloud  Eureka学习记录</h1><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><h3 id="微服务的定义"><a href="#微服务的定义" class="headerlink" title="微服务的定义"></a>微服务的定义</h3><p>​    简单来说微服务就是一种将单一应用程序拆分为一小组小型服务的方法,拆分完成后,每一个服务都运行在独立的进程中,服务与服务之间采用轻量级的通信进行沟通</p><h3 id="为什么要用微服务"><a href="#为什么要用微服务" class="headerlink" title="为什么要用微服务"></a>为什么要用微服务</h3><p>互联网应用产品的两大特点：</p><p>​    1、需求变化快</p><p>​    2、用户群体大</p><p>综上，使用传统的开发方式已经无法满足需求,需要一个能够灵活扩展,快读应对外部环境的应用</p><h3 id="微服务的优势"><a href="#微服务的优势" class="headerlink" title="微服务的优势"></a>微服务的优势</h3><p>​    复杂度可控 ，独立部署，技术选型灵活，较好的容错性，较强的可扩展性</p><h2 id="SpringCloud概述"><a href="#SpringCloud概述" class="headerlink" title="SpringCloud概述"></a>SpringCloud概述</h2><h3 id="什么是SpringCloud"><a href="#什么是SpringCloud" class="headerlink" title="什么是SpringCloud"></a>什么是SpringCloud</h3><p>​    SpringCloud内部包含许多框架,这些框架互相协作,共同构建分布式系统</p><h3 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h3><p>​    服务注册与发现，负载均衡，服务之间调用，容错,服务降级,熔断器，消息总线，分布式配置中心</p><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p>​    Eureka是SpringCloud的注册中心</p><h3 id="Eureka的组成部分"><a href="#Eureka的组成部分" class="headerlink" title="Eureka的组成部分"></a>Eureka的组成部分</h3><ul><li><p>服务端</p><ul><li>注册中心,用来接收其他服务的注册</li></ul></li><li><p>客户端</p><ul><li>客户端是一个java客户端,用来注册,并可以实现负载均衡等功能</li></ul></li></ul><h3 id="Eureka的三个角色"><a href="#Eureka的三个角色" class="headerlink" title="Eureka的三个角色"></a>Eureka的三个角色</h3><ul><li><p>Eureka Server:注册中心</p><ul><li>Eureka 服务器是服务注册中心，它负责维护服务提供者和服务消费者的信息。所有的服务提供者都向 Eureka 服务器注册自己的信息，而服务消费者则可以从 Eureka 服务器获取服务提供者的信息。</li></ul></li><li><p>Eureka Provider:服务提供者 </p><ul><li>服务提供者是一个运行中的微服务应用，它将自己注册到 Eureka 服务器，以便其他服务能够发现和调用它。服务提供者向 Eureka 服务器发送心跳以表明其健康状态，并定期更新自己的信息，比如IP地址、端口号等。</li></ul></li><li><p>Eureka Consumer :服务消费者</p><ul><li>服务消费者是依赖某个服务的微服务应用。它通过 Eureka 服务器来查找需要调用的服务提供者的信息，以便发起请求。</li></ul></li></ul><h3 id="搭建Eureka服务端"><a href="#搭建Eureka服务端" class="headerlink" title="搭建Eureka服务端"></a>搭建Eureka服务端</h3><ul><li><p>在启动类上添加<code>@EnableEurekaServer</code>注解来启用<code>Euerka</code>注册中心功能</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@EnableEurekaServer</span>  <span class="token annotation punctuation">@SpringBootApplication</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaServerApplication</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>添加配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 给当前服务取一个名字</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">eureka</span></code></pre></li><li><p>设置端口号</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">1111</span><span class="token attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 表示是否从 Eureka Server 上获取注册信息</span><span class="token attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre></li><li><p>出现此界面即为搭建成功</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307281735986.png" alt="image-20230728173456816"></p></li></ul><h3 id="搭建Eureka客户端"><a href="#搭建Eureka客户端" class="headerlink" title="搭建Eureka客户端"></a>搭建Eureka客户端</h3><p>1、添加pom.xml依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、在main方法添加@EnableDiscoveryClient注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaClientApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaClientApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、application.properties添加配置文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">1114</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">eureka-client</span><span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://localhost:1111/eureka</span></code></pre><p>出现以下界面则为成功</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230728174052488.png" alt="image-20230728174052488"></p><h3 id="搭建Eureka注册中心集群"><a href="#搭建Eureka注册中心集群" class="headerlink" title="搭建Eureka注册中心集群"></a>搭建Eureka注册中心集群</h3><p>由于所有服务都会注册到注册中心去，服务之间的调用都是通过从注册中心获取的服务列表来调用，注册中心一旦宕机，所有服务调用都会出现问题。所以我们需要多个注册中心组成集群来提供服务，下面将搭建一个双节点的注册中心集群。</p><p>1、 修改hosts</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307281748317.png" alt="image-20230728174855401"></p><ul><li><p>新建两个配置文件</p><p>配置文件a</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 给当前服务取一个名字</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">eureka</span><span class="token comment" spellcheck="true"># 设置端口号</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">1111</span><span class="token attr-name">eureka.instance.hostname</span><span class="token punctuation">=</span><span class="token attr-value">eureka1</span><span class="token attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 表示是否从 Eureka Server 上获取注册信息</span><span class="token attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># A 服务要注册到 B 上面</span><span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://eureka2:1112/eureka</span></code></pre><p>配置文件b</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 给当前服务取一个名字</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">eureka</span><span class="token comment" spellcheck="true"># 设置端口号</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">1112</span><span class="token attr-name">eureka.instance.hostname</span><span class="token punctuation">=</span><span class="token attr-value">eureka2</span><span class="token attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 表示是否从 Eureka Server 上获取注册信息</span><span class="token attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># A 服务要注册到 B 上面</span><span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://eureka1:1111/eureka</span></code></pre></li><li><p>运行两个实例</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307281752491.png"></p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307281752830.png" alt="image-20230728175212793"></p></li></ul><h3 id="Eureka-的工作细节"><a href="#Eureka-的工作细节" class="headerlink" title="Eureka 的工作细节"></a>Eureka 的工作细节</h3><ul><li><p>Eureka 服务器（Server）的功能：</p><ul><li><p>服务注册表管理：</p><p>​    服务器记录所有已注册的服务实例的信息，以供其他服务查询。</p></li><li><p>服务注册信息存储：</p><p>​    服务器保存服务实例的注册信息，以便快速响应查询请求。</p></li><li><p>服务实例健康检查：</p><p>​    服务器定期检查服务实例的心跳信息，确保它们正常工作。</p></li><li><p>服务实例信息同步：</p><p>​    服务器把服务实例的变化通知给客户端，保持注册表的最新状态。</p></li><li><p>自我保护机制：</p><p>​    服务器在与大多数客户端通信故障时，保护注册表中的服务实例，防止服务之间完全失联。</p></li></ul></li><li><p>Eureka 客户端（Client）的功能：</p><ul><li>服务注册：</li></ul><p>​    客户端将自己的服务信息告诉服务器，让其他服务可以找到它。</p><ul><li><p>心跳和续约：</p><p>​    客户端定期向服务器发送信号，表明它还活着。让服务器就知道实例还在运行，并保持最新的信息。</p></li><li><p>服务下线：</p><p>   客户端通知服务器，自己即将关闭或停止服务，服务器将把它从列表中移除。</p></li><li><p>服务发现</p><p>   客户端向服务器询问需要访问的其他服务的信息，服务器返回可用的服务实例。</p></li></ul></li></ul><h3 id="服务注册与消费"><a href="#服务注册与消费" class="headerlink" title="服务注册与消费"></a>服务注册与消费</h3><ul><li><p>服务注册</p><ul><li>服务提供者在启动时会向 Eureka 服务器发送注册请求，包含自身的服务名称、主机名、端口号等信息。Eureka 服务器会将这些信息记录在注册表中，并为服务提供者分配一个唯一的标识符（通常是服务实例的ID）。这样，其他服务消费者可以通过查询 Eureka 服务器来获取服务提供者的信息，并与其进行通信。</li></ul></li><li><p>服务消费</p><ul><li>服务消费者通过向 Eureka 服务器发送查询请求，获取需要访问的服务提供者的信息。Eureka 服务器返回一个或多个可用的服务实例给服务消费者。然后，服务消费者可以使用这些信息来建立与服务提供者的通信连接，并发送请求获取所需的数据或执行相应的操作。</li></ul></li></ul><p>示例</p><p>服务注册端：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello javaboy"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>服务调用端:</p><p>​    controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"restTemplate"</span><span class="token punctuation">)</span>    RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://eureka-client/hello"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaConsumApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaConsumApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    RestTemplate <span class="token function">restTemplateOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    运行结果</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20230728180243438.png" alt="image-20230728180243438"> </p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="前后端分离跨域问题解决记录"><a href="#前后端分离跨域问题解决记录" class="headerlink" title="前后端分离跨域问题解决记录"></a>前后端分离跨域问题解决记录</h2><h4 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h4><p>当一个请求的url路径,端口,协议三者之间的任意一个与当前页面不同即为跨域</p><h4 id="覆盖默认的CorsFilter来解决该问题"><a href="#覆盖默认的CorsFilter来解决该问题" class="headerlink" title="覆盖默认的CorsFilter来解决该问题"></a>覆盖默认的CorsFilter来解决该问题</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalCorsConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 允许跨域调用的过滤器     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CorsFilter <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CorsConfiguration config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许所有域名进行跨域调用</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedOriginPattern</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许跨越发送cookie</span>        config<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//放行全部原始头信息</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//允许所有请求方法跨域调用</span>        config<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="设置SpringSecurity允许OPTIONS请求访问"><a href="#设置SpringSecurity允许OPTIONS请求访问" class="headerlink" title="设置SpringSecurity允许OPTIONS请求访问"></a>设置SpringSecurity允许OPTIONS请求访问</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//允许跨域请求的OPTIONS请求</span>registry<span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span>HttpMethod<span class="token punctuation">.</span>OPTIONS<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java函数式编程学习记录</title>
      <link href="/posts/1f32.html"/>
      <url>/posts/1f32.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java函数式编程"><a href="#Java函数式编程" class="headerlink" title="Java函数式编程"></a>Java函数式编程</h1><h3 id="函数式编程-vs-面向对象编程"><a href="#函数式编程-vs-面向对象编程" class="headerlink" title="函数式编程 vs 面向对象编程"></a>函数式编程 vs 面向对象编程</h3><h4 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h4><ul><li>面向对象需要关注用什么对象完成什么事情，</li><li>函数式编程主要关注的是对数据进行了什么操作</li></ul><p>面向对象编程通过创建对象、定义属性和方法来解决问题，强调对象的状态和行为。而函数式编程通过定义和组合函数来解决问题，强调函数的输入和输出。</p><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><p>Lambda表达式的主要功能是可以对某些匿名内部类进行简化。使得代码更加整洁清晰</p><h4 id="核心原则"><a href="#核心原则" class="headerlink" title="核心原则"></a>核心原则</h4><p>可推导可省略</p><h4 id="使用必要条件"><a href="#使用必要条件" class="headerlink" title="使用必要条件"></a>使用必要条件</h4><p>匿名内部类必须为接口且只有一个抽象方法需要重写</p><h4 id="example1"><a href="#example1" class="headerlink" title="example1"></a>example1</h4><ul><li>Lambda写法</li></ul><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20230710170541192.png" alt="image-20230710170541192"><ul><li>普通写法</li></ul><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/image-20230710170558764.png" alt="image-20230710170558764" style="zoom: 115%;"><h4 id="example2"><a href="#example2" class="headerlink" title="example2"></a>example2</h4><p>抽象接口IntBinaryOperator的内容如下:</p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101744066.png" alt="image-20230710173744204" style="zoom:95%;"><ul><li>普通写法</li></ul><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101734500.png" alt="image-20230710173437091" style="zoom:78%;"><ul><li><p>lambda写法</p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101744147.png" alt="image-20230710174008235" style="zoom:85%;"></li></ul><h4 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h4><ul><li><p>参数类型可以省略</p></li><li><p>方法体只有一句时大括号和return和分号可以省略</p></li><li><p>方法只有一个参数时小括号可以省略</p><h5 id="example"><a href="#example" class="headerlink" title="example"></a>example</h5><ul><li><p>省略前</p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101744021.png" alt="image-20230710174311878" style="zoom:95%;"></li><li><p>省略后</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101744062.png" alt="image-20230710174355840"></p></li></ul></li></ul><h3 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h3><h4 id="Stream流的作用"><a href="#Stream流的作用" class="headerlink" title="Stream流的作用"></a>Stream流的作用</h4><p>大数据量下处理集合效率更高</p><ul><li><p>并行流</p></li><li><p>消灭嵌套地狱</p></li><li><p>代码可读性高</p></li></ul><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101747367.png" alt="image-20230710174728779" style="zoom:80%;"><h4 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h4><ul><li><p>匿名内部类写法</p><p>  <img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101750514.png" alt="image-20230710174924258"></p></li><li><p>Lambda写法</p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101750661.png" alt="image-20230710174941132" style="zoom:80%;"></li></ul><h4 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h4><ul><li><h5 id="单列集合"><a href="#单列集合" class="headerlink" title="单列集合"></a>单列集合</h5><pre class=" language-java"><code class="language-java">集合对象<span class="token punctuation">.</span><span class="token function">Stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101751694.png" alt="image-20230710175053030" style="zoom:150%;"></li><li><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre class=" language-java"><code class="language-java">Arrays<span class="token punctuation">.</span>stream</code></pre><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101813682.png" alt="image-20230710175228482" style="zoom:150%;"></li><li><h5 id="双列集合"><a href="#双列集合" class="headerlink" title="双列集合"></a>双列集合</h5><p>转为单列集合再创建 </p><pre class=" language-java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101813240.png" alt="image-20230710175453709" style="zoom:150%;"></li><li><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>1、惰性求值（如果没有终结操作，没有中间操作是不会得到快行的）<br>2、流是一次性的（二旦一个流对像经过一个终结操作后。这个流就不能再被使用）<br>3、不会影响原数据（我们在流中可以多数据做很多处理。但是正常情况下是不会影响原来集合</p></li></ul><h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><ul><li><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><p>可以对流中的元素进行条件过滤，符合条件的继续留在流中</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101813292.png" alt="image-20230710175722633"></p></li><li><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>可以把对流中的元素进行计算或转换。</p><h6 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h6><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101813998.png" alt="image-20230710175843777" style="zoom:150%;"><h6 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h6><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101813472.png" alt="image-20230710175859855" style="zoom:150%;"></li><li><h5 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h5><p>可以去除流中的重复元素</p><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> - 注意：distinct方法是依赖Object的equals方法来判断是否是相同对象的。所以需要注意重写equals方法。</div><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101813573.png" alt="image-20230710180050630"></p></li><li><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h5><p>可以对流中的元素进行排序</p><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> -  返回由该流的元素组成的流，按自然顺序排序。如果此流的元素不是Comparable，则在执行终端操作时可能会抛出 。java.lang.ClassCastException</div><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812235.png" alt="image-20230710180100586"></p></li><li><h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><p>限制输出</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812466.png" alt="image-20230710180112817"></p></li><li><h5 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h5><p>跳过元素</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812530.png" alt="image-20230710180125656"></p></li><li><h5 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h5><p>map只能把一个对象转换成另一个对象来作为流中的元素。而flatMap可以把一个对象转换成多个对象作为流中的元素。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812731.png" alt="image-20230710180145491"></p></li></ul><h4 id="终结操作"><a href="#终结操作" class="headerlink" title="终结操作"></a>终结操作</h4><ul><li><h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><p>可以用来获取当前流中元素的个数。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812887.png" alt="image-20230710180256266"></p></li><li><h5 id="max-min"><a href="#max-min" class="headerlink" title="max/min"></a>max/min</h5><p>求最大最小值</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812887.png"></p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812832.png" alt="image-20230710180314936"></p></li><li><h5 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h5><p>把当前流转换成一个集合。</p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812251.png" alt="image-20230710180410873" style="zoom:150%;"></li><li><h5 id="reduce归并"><a href="#reduce归并" class="headerlink" title="reduce归并"></a>reduce归并</h5><p>对流中的数据按照你指定的计算方式计算出一个结果。</p><p>官方给出的源码格式</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812897.png" alt="image-20230710180518039"></p><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812822.png" alt="image-20230710180551732"></p><h6 id="reduce的另一种重载方法"><a href="#reduce的另一种重载方法" class="headerlink" title="reduce的另一种重载方法"></a>reduce的另一种重载方法</h6><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812050.png" alt="image-20230710181046650"></p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812281.png" alt="image-20230710180700950"></p></li></ul><h4 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h4><ul><li><h5 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h5><p>可以用来判断是否有任意符合匹配条件的元素，结果为boolean类型。</p><p><img src="https://cdn.jsdelivr.net/gh/xiaozhaoc/zhao-imgs/images/202307101812357.png" alt="image-20230710180718185"></p></li><li><p>allMatch</p><p>可以用来判断是否有全部符合匹配条件的元素</p></li><li><p>noneMatch</p><p>可以用来判断是否有全部不符合匹配条件的元素</p></li></ul><h4 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h4><p>我们在使用ambda时，如果方法体中只有一个方法的调用的话（包括构造方法），我们可以用方法引用进一步简化代码。</p><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><pre class=" language-java"><code class="language-java">类名或者对象名<span class="token operator">:</span><span class="token operator">:</span>方法名</code></pre><h5 id="引用类的静态方法"><a href="#引用类的静态方法" class="headerlink" title="引用类的静态方法"></a>引用类的静态方法</h5><ul><li><p>类名::方法名</p><p> 使用前提如果我们在重写方法的时候，方法体中只有一行代码，并目这行代码是调用了某个类的静态方法，并目我们把要重写的抽象方法中所有的参数都按照顺序传入了这个静态方法中，这个时候我们就可以引用类的静态方法。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 函数式编程 </tag>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2</title>
      <link href="/posts/c9f9.html"/>
      <url>/posts/c9f9.html</url>
      
        <content type="html"><![CDATA[<div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 紅色</div><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 綠色</div><div class="uk-alert uk-alert-warning"><i class="fa fa-exclamation-circle"></i> 黃色</div>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>:<span class="github-emoji"><span>🛰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6f0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
